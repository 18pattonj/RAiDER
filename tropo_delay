#!/usr/bin/env python
"""
usage: tropo_delay [-h] [--lineofsight LOS | --statevectors STATEVECTORS]
                   [--area LONG LAT]
                   [--dem DEM | --heightlvs HEIGHTLVS [HEIGHTLVS ...]]
                   [--time TIME] [--model MODEL] [--wrfmodelfiles OUT PLEV]
                   [--wmnetcdf WMNETCDF] [--zref ZREF] [--out OUT]

Calculate tropospheric delay from a weather model

optional arguments:
  -h, --help            show this help message and exit
  --lineofsight LOS, -l LOS
                        GDAL-readable line-of-sight file
  --statevectors STATEVECTORS, -s STATEVECTORS
                        An ISCE XML or shelve file containing state vectors
                        specifying the orbit of the sensor
  --area LONG LAT, -a LONG LAT
                        GDAL-readable longitude and latitude files to specify
                        the region over which to calculate delay. Delay will
                        be calculated at weather model nodes if unspecified
  --dem DEM, -d DEM     DEM file. DEM will be downloaded if not specified
  --heightlvs HEIGHTLVS [HEIGHTLVS ...]
                        Delay will be calculated at each of these heights
                        across all of the specified area
  --time TIME           Fetch weather model data at this (ISO 8601 format)
                        time
  --model MODEL         Weather model to use
  --wmnetcdf WMNETCDF   Weather model netcdf file. Should have q, t, z, lnsp
                        as variables
  --zref ZREF, -z ZREF  Height limit when integrating (meters) (default:
                        15000)
  --out OUT             Output file directory

WRF:
  Arguments for when --model WRF is specified

  --wrfmodelfiles OUT PLEV
                        WRF model files
"""


import argparse
import datetime
import itertools
import importlib
import delay


def read_date(s):
    """Read a date from a string in pseudo-ISO 8601 format."""
    year_formats = (
        '%Y-%m-%d',
        '%Y%m%d',
        '%Y-%m',
        '%Y',  # I don't think anyone would ever want just a year
    )
    time_formats = (
        '',
        'T%H:%M:%S.%f',
        'T%H:%M:%S',
        'T%H%M%S.%f',
        'T%H%M%S',
        'T%H:%M',
        'T%H%M',
        'T%H',
    )
    timezone_formats = (
        '',
        'Z',
        '%z',
    )
    all_formats = map(
        ''.join,
        itertools.product(year_formats, time_formats, timezone_formats))
    date = None
    for date_format in all_formats:
        try:
            date = datetime.datetime.strptime(s, date_format)
        except ValueError:
            continue
    if date is None:
        raise ValueError(
            'Unable to coerce {} to a date. Try %Y-%m-%dT%H:%M:%S.%f%z'.format(s))

    return date


def mangle_model_to_module(model_name):
    """Turn an arbitrary string into a module name.

    Takes as input a model name, which hopefully looks like ERA-I, and
    converts it to a module name, which will look like erai. I doesn't
    always produce a valid module name, but that's not the goal. The
    goal is just to handle common cases.
    """
    return model_name.lower().replace('-', '')


def parse_args():
    """Parse command line arguments using argparse."""
    p = argparse.ArgumentParser(
        description='Calculate tropospheric delay from a weather model')

    # Line of sight
    los = p.add_mutually_exclusive_group()
    los.add_argument(
        '--lineofsight', '-l',
        help='GDAL-readable line-of-sight file',
        metavar='LOS')
    los.add_argument(
        '--statevectors', '-s',
        help=('An ISCE XML or shelve file containing state vectors specifying '
              'the orbit of the sensor'))

    # Area
    area = p.add_mutually_exclusive_group()
    area.add_argument(
        '--area', '-a', nargs=2,
        help=('GDAL-readable longitude and latitude files to specify the '
              'region over which to calculate delay. Delay will be '
              'calculated at weather model nodes if unspecified'),
        metavar=('LAT', 'LONG'))
    area.add_argument(
        '--bounding_box', '-bb', nargs=4,
        help=('Bounding box, given as N W S E'),
        metavar=('N', 'W', 'S', 'E'))

    # heights
    heights = p.add_mutually_exclusive_group()
    heights.add_argument(
        '--dem', '-d',
        help='DEM file. DEM will be downloaded if not specified')
    heights.add_argument(
        '--heightlvs',
        help=('Delay will be calculated at each of these heights across '
              'all of the specified area'),
        nargs='+', type=float)

    # Weather model
    p.add_argument(
        '--time',
        help='Fetch weather model data at this (ISO 8601 format) time',
        type=read_date)
    p.add_argument(
        '--model',
        help='Weather model to use',
        default='ERA-I')
    p.add_argument(
        '--pickleFile',
        help='Pickle file to load',
        default=None)

    wrf = p.add_argument_group(
        title='WRF',
        description='Arguments for when --model WRF is specified')
    wrf.add_argument(
        '--wrfmodelfiles', nargs=2,
        help='WRF model files',
        metavar=('OUT', 'PLEV'))

    p.add_argument(
        '--wmnetcdf',
        help=('Weather model netcdf file. Should have q, t, z, lnsp as '
              'variables'))

    # Height max
    p.add_argument(
        '--zref', '-z',
        help=('Height limit when integrating (meters) '
              '(default: %(default)s)'),
        type=int, default=15000)

    p.add_argument(
        '--outformat', help='GDAL format for output files (default: ENVI)',
        default='ENVI')

    p.add_argument('--out', help='Output file directory', default='.')
    p.add_argument('--model_location', help='Directory where weather model files are stored', default='.', dest='wmLoc')

    p.add_argument('--no_parallel', '-p', action='store_true',dest='no_parallel', default = False, help='Do not run operation in parallel? Default False. Recommend only True for verbose (debug) mode')

    p.add_argument('--download_only', action='store_true',dest='download_only', default = False, help='Download weather model only without processing? Default False')

    p.add_argument('--writeLatLonFile', '-w', action='store_true',dest='writeLLFile', default = False, help='Write weather model lat/lons to file? Default False')

    p.add_argument('--verbose', '-v', action='store_true',dest='verbose', default = False, help='Run in verbose (debug) mode? Default False')

    return p.parse_args(), p


def getTropoDelay():
    """tropo_delay main function.

    We'll parse arguments and call delay.py.
    """
    args, p = parse_args()

    # Line of sight
    if args.lineofsight is not None:
        los = ('los', args.lineofsight)
    elif args.statevectors is not None:
        los = ('sv', args.statevectors)
    else:
        los = None

    # Area
    if args.area is not None:
        lat, lon = args.area
    elif args.bounding_box is not None:
        import numpy as np
        N,W,S,E = args.bounding_box
        lat = np.array([float(N), float(S)])
        lon = np.array([float(E), float(W)])
    else:
        lat = lon = None

    # DEM
    if args.dem is not None:
        heights = ('dem', args.dem)
    elif args.heightlvs is not None:
        heights = ('lvs', args.heightlvs)
    else:
        heights = ('download', None)

    # Weather
    if args.model == 'WRF':
        if args.wmnetcdf is not None:
            p.error('Argument --wmnetcdf invalid with --model WRF')
        if args.wrfmodelfiles is not None:
            weathers = {'type': 'wrf', 'files': args.wrfmodelfiles,
                        'name': 'wrf'}
        else:
            p.error('Argument --wrfmodelfiles required with --model WRF')
    elif args.model=='ERA5' or args.model == 'ERA-5':
        from models.era5 import ERA5
        weathers = {'type': ERA5(), 'files':None, 'name':'ERA-5'}
    elif args.model=='pickle':
        import pickle
        weathers = {'type':'pickle', 'files': args.pickleFile, 'name': 'pickle'}
    else:
        model_module_name = mangle_model_to_module(args.model)
        try:
            model_module = importlib.import_module(model_module_name)
        except ImportError:
            p.error("Couldn't find a module named {}, ".format(repr(model_module_name))+
                    "needed to load weather model {}".format(repr(args.model)))
        if args.wmnetcdf is not None:
            weathers = {'type': model_module.Model(), 'files': args.wmnetcdf,
                        'name': args.model}
        elif args.time is None:
            p.error('Must specify one of --wmnetcdf or --time (so I can '
                    'figure out what to download)')
        elif lat is None:
            p.error('Must specify one of --wmnetcdf or --area (so I can '
                    'figure out what to download)')
        else:
            weathers = {'type': model_module.Model(), 'files': None,
                        'name': args.model}

    # zref
    zref = args.zref
    outformat = args.outformat
    time = args.time
    out = args.out
    wmLoc = args.wmLoc
    wmName = None
    download_only = args.download_only
    parallel = True if not args.no_parallel else False
    writeLL = args.writeLLFile

    verbose = args.verbose
    if verbose: 
       print('Starting to run the weather model calculation')
       print('Time type: {}'.format(type(time)))
       print('Time: {}'.format(time.strftime('%Y%m%d')))

       print('Weather model file location: {}'.format(wmLoc))
       print('Parallel is {}'.format(parallel))

       print('Now running delay module from: {}'.format(delay.__file__))


    delay.tropo_delay(los, lat, lon, 
                      heights, 
                      weathers, 
                      zref, 
                      out, 
                      wmLoc, 
                      wmName,
                      time, 
                      outformat, 
                      parallel=parallel, 
                      writeLL = writeLL,
                      verbose = verbose, 
                      download_only = download_only)


if __name__ == '__main__':
    getTropoDelay()

