#!/usr/bin/env python3


import argparse
import datetime
import delay
import itertools
import importlib


def read_date(s):
    year_formats = (
        '%Y-%m-%d',
        '%Y%m%d',
        '%Y-%m',
        '%Y', # I don't think anyone would ever want just a year
    )
    time_formats = (
        '',
        'T%H:%M:%S.%f',
        'T%H:%M:%S',
        'T%H%M%S.%f',
        'T%H%M%S',
        'T%H:%M',
        'T%H%M',
        'T%H',
    )
    timezone_formats = (
        '',
        'Z',
        '%z',
    )
    all_formats = map(lambda t: ''.join(t), itertools.product(year_formats, time_formats, timezone_formats))
    date = None
    for date_format in all_formats:
        try:
            date = datetime.datetime.strptime(s, date_format)
        except ValueError:
            continue
    if date is None:
        raise ValueError(f'Unable to coerce {s} to a date. Try %Y-%m-%dT%H:%M:%S.%f%z')

    return date


class ArgGroup:
    def __init__(self, name, *args):
        self.name = name
        self.args = args
    def __iter__(self):
        return iter(self.args)


def mangle_model_to_module(model_name):
    """Turn an arbitrary string into a module name.

    Takes as input a model name, which hopefully looks like ERA-I, and
    converts it to a module name, which will look like erai. I doesn't
    always produce a valid module name, but that's not the goal. The
    goal is just to handle common cases.
    """
    return model_name.lower().replace('-', '')


def main():
    p = argparse.ArgumentParser(
            description='Calculate tropospheric delay from a weather model')

    # Line of sight
    los = p.add_mutually_exclusive_group()
    los.add_argument(
            '--lineofsight', '-l',
            help='GDAL-readable line-of-sight file',
            metavar='LOS')
    los.add_argument(
            '--statevectors', '-s',
            help='An ISCE XML or shelve file containing state vectors '
                'specifying the orbit of the sensor')

    # Area
    p.add_argument(
            '--area', '-a', nargs=2,
            help='GDAL-readable longitude and latitude files to specify the '
                'region over which to calculate delay. Delay will be '
                'calculated at weather model nodes if unspecified',
            metavar=('LONG', 'LAT'))

    # heights
    heights = p.add_mutually_exclusive_group()
    heights.add_argument(
            '--dem', '-d',
            help='DEM file. DEM will be downloaded if not specified')
    heights.add_argument(
            '--heightlvs',
            help='Delay will be calculated at each of these heights across '
                'all of the specified area',
            nargs='+', type=float)

    # Weather model
    p.add_argument(
            '--time',
            help='Fetch weather model data at this (ISO 8601 format) time',
            type=read_date)
    p.add_argument(
            '--model',
            help='Weather model to use',
            default='ERA-I')

    wrf = p.add_argument_group(
            title='WRF',
            description='Arguments for when --model WRF is specified')
    wrf.add_argument(
            '--wrfmodelfiles', nargs=2,
            help='WRF model files',
            metavar=('OUT', 'PLEV'))

    p.add_argument(
            '--wmnetcdf',
            help='Weather model netcdf file. Should have q, t, z, lnsp as '
                'variables')

    # Height max
    p.add_argument(
            '--zref', '-z',
            help='Height limit when integrating (meters) '
                '(default: %(default)s)',
            type=int, default=15000)

    p.add_argument('--out', help='Output file directory', default='.')

    args = p.parse_args()

    # Line of sight
    if args.lineofsight is not None:
        los = ('los', args.lineofsight)
    elif args.statevectors is not None:
        los = ('sv', args.statevectors)
    else:
        los = None

    # Area
    if args.area is not None:
        lat, lon = args.area
    else:
        lat = lon = None

    # DEM
    if args.dem is not None:
        heights = ('dem', args.dem)
    elif args.heightlvs is not None:
        heights = ('lvs', args.heightlvs)
    else:
        heights = ('download', None)

    # Weather
    if args.model == 'WRF':
        if args.wmnetcdf is not None:
            p.error('Argument --wmnetcdf invalid with --model WRF')
        if args.wrfmodelfiles is not None:
            weathers = {'type': 'wrf', 'files': args.wrfmodelfiles,
                        'name': 'wrf'}
        else:
            p.error('Argument --wrfmodelfiles required with --model WRF')
    else:
        model_module_name = mangle_model_to_module(args.model)
        try:
            model_module = importlib.import_module(model_module_name)
        except ImportError:
            p.error(f"Couldn't find a module named {repr(model_module_name)}, "
                f"needed to load weather model {repr(args.model)}")
        if args.wmnetcdf is not None:
            weathers = {'type': model_module, 'files': args.wmnetcdf,
                        'name': args.model}
        elif args.time is None:
            p.error('Must specify one of --wmnetcdf or --time (so I can '
                'figure out what to download)')
        elif lat is None:
            p.error('Must specify one of --wmnetcdf or --area (so I can '
                'figure out what to download)')
        else:
            weathers = {'type': model_module, 'files': None,
                        'name': args.model}

    # zref
    zref = args.zref

    time = args.time

    out = args.out

    return delay.tropo_delay(los, lat, lon, heights, weathers, zref, out, time)


if __name__ == '__main__':
    main()
